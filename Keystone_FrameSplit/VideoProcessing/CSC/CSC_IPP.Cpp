//#include "../../Utility/appincludes.h"
//#include <ippi.h>
//
////TO RGB24
//CColorSpaceIPP::RGB32ToRGB24(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	////TODO: IANIER
//	////Create the RGB24 target buffer
//	//LPBYTE RGB24Buffer = NULL;
//	//RGB24Buffer = (LPBYTE)malloc(H * W * 4);
//
//	//dst = RGB24Buffer;
//	dst = src;
//	return S_OK;
//}
//
//CColorSpaceIPP::UYVYToRGB24(LPBYTE src, int W, int H, LPBYTE* dst)
//{
//	//TODO: IANIER - Priority A - For frame capture of output image.
//	*dst = src;
//	return S_OK;
//}
//
//CColorSpaceIPP::YUY2ToRGB24(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	dst = src;
//	return S_OK;
//}
//
//CColorSpaceIPP::ARGB4444ToRGB24(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	dst = src;
//	return S_OK;
//}
//
////TO RGB32
//CColorSpaceIPP::RGB24ToRGB32(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::UYVYToRGB32(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::YUY2ToRGB32(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::ARGB4444ToRGB32(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	return S_OK;
//}
//
////TO UYVY
//CColorSpaceIPP::RGB24ToUYVY(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER - Priority 1	
//	return S_OK;
//}
//
//CColorSpaceIPP::RGB32ToUYVY(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::YUY2ToUYVY(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::ARGB4444ToUYVY(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER - Priority 1
//	return S_OK;
//}
//
//CColorSpaceIPP::RGB8ToUYVY(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER - Priority 1
//	return S_OK;
//}
//
////TO YUY2
//CColorSpaceIPP::RGB24ToYUY2(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	return S_OK;
//}
//
//CColorSpaceIPP::RGB32ToYUY2(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::UYVYToYUY2(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::ARGB4444ToYUY2(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER - Priority 1
//	return S_OK;
//}
//
////TO ARGB4444
//CColorSpaceIPP::RGB24ToARGB4444(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	return S_OK;
//}
//
//CColorSpaceIPP::RGB32ToARGB4444(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::UYVYToARGB4444(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER	
//	return S_OK;
//}
//
//CColorSpaceIPP::YUY2ToARGB4444(LPBYTE src, int W, int H, LPBYTE dst)
//{
//	//TODO: IANIER
//	return S_OK;
//}